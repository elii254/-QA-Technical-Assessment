"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebdriverIOHarnessEnvironment = void 0;
const tslib_1 = require("tslib");
const testing_1 = require("@angular/cdk/testing");
const logger_1 = tslib_1.__importDefault(require("@wdio/logger"));
const safe_1 = require("@colors/colors/safe");
const WebdriverIOTestElement_1 = require("./WebdriverIOTestElement");
/** Registers the environment logger. */
const log = logger_1.default('wdio-harness');
/**
 * A `HarnessEnvironment` implementation for WebdriverIO.
 */
class WebdriverIOHarnessEnvironment extends testing_1.HarnessEnvironment {
    constructor(rawRootElement, options) {
        super(rawRootElement);
        this.documentRoot = options.documentRoot;
    }
    /** Creates a `HarnessLoader` rooted at the document root. */
    static loader(documentRoot) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return new WebdriverIOHarnessEnvironment(documentRoot, { documentRoot });
        });
    }
    /**
     * Flushes change detection and async tasks captured in the Angular zone.
     * In most cases it should not be necessary to call this manually. However, there may be some edge
     * cases where it is needed to fully flush animation events.
     */
    forceStabilize() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /* await browser.executeAsyncScript(`
                const done = arguments[0];
                window.requestAnimationFrame(done);
            `, []);*/
        });
    }
    waitForTasksOutsideAngular() {
        throw new Error('Method not implemented.');
    }
    /** Gets the root element for the document. */
    getDocumentRoot() {
        return this.documentRoot;
    }
    /** Creates a `TestElement` from a raw element. */
    createTestElement(element) {
        return new WebdriverIOTestElement_1.WebdriverIOTestElement(element);
    }
    /** Creates a `HarnessLoader` rooted at the given raw element. */
    createEnvironment(element) {
        return new WebdriverIOHarnessEnvironment(element, {
            documentRoot: this.documentRoot
        });
    }
    /** Gets a list of all elements matching the given selector under this environment's root element. */
    getAllRawElements(selector) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            log.info(`${safe_1.magenta('GET_ALL_RAW_ELEMENTS')} ${safe_1.green(selector.toString())}`);
            return yield this.rawRootElement.$$(selector);
        });
    }
}
exports.WebdriverIOHarnessEnvironment = WebdriverIOHarnessEnvironment;
